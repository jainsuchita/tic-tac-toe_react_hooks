{"version":3,"sources":["utils/constants.js","utils/helper.js","components/Square.js","components/Modal.js","tictactoe.js","components/Board.js","App.js","index.js"],"names":["GAME_STATES","getRandomInt","min","max","Math","ceil","floor","random","Button","styled","button","Square","props","value","rest","onClick","isActive","customStyles","overlay","backgroundColor","StyledModal","Modal","ModalWrapper","div","ModalTitle","p","ModalContent","ModalFooter","CustomModal","isOpen","close","startNewGame","winner","ariaHideApp","onRequestClose","style","arr","Array","fill","board","grid","getEmptySquares","squares","forEach","square","i","push","isEmpty","length","getWinner","winningCombos","res","el","winningIndex","getStrikethroughStyles","clone","Board","concat","this","ButtonRow","Screen","Inner","ChooseText","Container","dims","Strikethrough","styles","Tictactoe","useState","setGrid","gameState","setGameState","human","computer","players","setPlayers","nextMove","setNextMove","setWinner","modalOpen","setModalOpen","useEffect","winnerStr","setTimeout","declareWinner","move","useCallback","index","player","gridCopy","computerMove","choosePlayer","option","timeout","clearTimeout","map","key","humanMove","MainContainer","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb6b5487.chunk.js","sourcesContent":["// Dimensions of the board (3x3 squares), game outcomes and players, \n// and dimensions for the board squares, in pixels.\n\nexport const DIMS = 3;\nexport const DRAW = 0;\nexport const PLAYER_X = 1;\nexport const PLAYER_O = 2;\nexport const SQUARE_DIMS = 100;\n\nexport const GAME_STATES = {\n    notStarted: \"not_started\",\n    inProgress: \"in_progress\",\n    over: \"over\"\n};\n","import { PLAYER_O, PLAYER_X } from \"./constants\";\n\n// Get random integer in a range min-max\nexport const getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n\nexport const switchPlayer = player => {\n    return player === PLAYER_X ? PLAYER_O : PLAYER_X;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { SQUARE_DIMS } from \"utils\";\n\nconst Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${SQUARE_DIMS}px;\n  height: ${SQUARE_DIMS}px;\n  font-size: 30px;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst Square = props => {\n    const { value, ...rest } = props;\n\n    return (\n        <Button\n            onClick={() => rest.onClick()}>\n            {rest.isActive && value}\n        </Button>\n    );\n}\n\nexport default Square;\n","\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Modal from \"react-modal\";\n\nconst customStyles = {\n    overlay: {\n        backgroundColor: \"rgba(0,0,0, 0.6)\"\n    }\n};\n\nconst CustomModal = ({ isOpen, close, startNewGame, winner }) => {\n    return (\n        <StyledModal ariaHideApp={false} isOpen={isOpen} onRequestClose={close} style={customStyles}>\n            <ModalWrapper>\n                <ModalTitle>Game over</ModalTitle>\n                <ModalContent>{winner}</ModalContent>\n\n                <ModalFooter>\n                    <Button onClick={close}>Close</Button>\n                    <Button onClick={startNewGame}>Start over</Button>\n                </ModalFooter>\n            </ModalWrapper>\n        </StyledModal>\n    );\n};\n\n\n\nconst StyledModal = styled(Modal)`\n  display: flex;\n  flex-direction: column;\n  height: 300px;\n  position: relative;\n  margin: 0 auto;\n  top: 10%;\n  right: auto;\n  bottom: auto;\n  width: 320px;  \n`;\n\nconst ModalWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 24px;\n  background-color: #fff;\n  max-height: 100%;\n  height: 100%;\n  align-items: center;\n  backface-visibility: hidden;\n  padding: 1.25rem;\n  border: 1px solid black;\n`;\n\nconst ModalTitle = styled.p`\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n  font-size: 24px;\n  font-weight: bold;\n  text-transform: uppercase;\n`;\n\nconst ModalContent = styled.p`\n  flex: 1 1 auto;\n  text-align: center;\n`;\n\nconst ModalFooter = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex: 0 0 auto;\n  width: 100%;\n`;\n\nconst Button = styled.button`\n  font-size: 16px;\n`;\n\nexport default CustomModal;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport {\n    GAME_STATES, PLAYER_X, PLAYER_O, switchPlayer,\n    SQUARE_DIMS, DIMS, DRAW,\n    getRandomInt,\n} from \"utils\";\nimport { Square, Board, CustomModal } from \"components\";\n\nconst arr = new Array(DIMS ** 2).fill(null);\nconst board = new Board();\n\nconst Tictactoe = () => {\n    const [grid, setGrid] = useState(arr);\n\n    const [gameState, setGameState] = useState(GAME_STATES.notStarted);\n\n    const [players, setPlayers] = useState({\n        human: PLAYER_X,\n        computer: PLAYER_O\n    });\n\n    const [nextMove, setNextMove] = useState(null);\n\n    const [winner, setWinner] = useState(null);\n\n    const [modalOpen, setModalOpen] = useState(false);\n\n    /**\n   * On every move, check if there is a winner. If yes, set game state to over and open result modal\n   */\n    useEffect(() => {\n        const winner = board.getWinner(grid);\n\n        const declareWinner = winner => {\n            let winnerStr;\n            switch (winner) {\n                case PLAYER_X:\n                    winnerStr = \"Player X wins!\";\n                    break;\n                case PLAYER_O:\n                    winnerStr = \"Player O wins!\";\n                    break;\n                case DRAW:\n                default:\n                    winnerStr = \"It's a draw\";\n            }\n            setGameState(GAME_STATES.over);\n            setWinner(winnerStr);\n            // Slight delay for the modal so there is some time to see the last move\n            setTimeout(() => setModalOpen(true), 300);\n        };\n\n        if (winner !== null && gameState !== GAME_STATES.over) {\n            declareWinner(winner);\n        }\n    }, [gameState, grid, nextMove]);\n\n\n    /**\n    * Set the grid square with respective player that made the move. Only make a move when the game is in progress.\n    * useCallback is necessary to prevent unnecessary recreation of the function, unless gameState changes, since it is\n    * being tracked in useEffect\n    * @type {Function}\n    */\n\n    const move = useCallback(\n        (index, player) => {\n            if (player && gameState === GAME_STATES.inProgress) {\n                setGrid(grid => {\n                    const gridCopy = grid.concat();\n                    gridCopy[index] = player;\n                    return gridCopy;\n                });\n            }\n        },\n        [gameState]\n    );\n\n    const computerMove = useCallback(() => {\n        let index = getRandomInt(0, 8);\n        while (grid[index]) {\n            index = getRandomInt(0, 8);\n        }\n\n        move(index, players.computer);\n        setNextMove(players.human);\n\n    }, [move, grid, players]);\n\n    const humanMove = index => {\n        if (!grid[index]) {\n            move(index, players.human);\n            setNextMove(players.computer);\n        }\n    };\n\n    const choosePlayer = option => {\n        setPlayers({ human: option, computer: switchPlayer(option) });\n        setGameState(GAME_STATES.inProgress);\n        setNextMove(PLAYER_X); // Set the Player X to make the first move\n    };\n\n    const startNewGame = () => {\n        setGameState(GAME_STATES.notStarted);\n        setGrid(arr);\n        setModalOpen(false); // Close the modal when new game starts\n    };\n\n    /**\n    * Make computer move when it's computer's turn\n    */\n    useEffect(() => {\n        let timeout;\n        if (\n            nextMove !== null &&\n            nextMove === players.computer &&\n            gameState !== GAME_STATES.over\n        ) {\n            // Delay computer moves to make them more natural\n            timeout = setTimeout(() => {\n                computerMove();\n            }, 500);\n        }\n\n        // ComponentUnmount lifecycle hook\n        return () => timeout && clearTimeout(timeout);\n\n    }, [nextMove, computerMove, players.computer, gameState]);\n\n    return gameState === GAME_STATES.notStarted ? (\n        <Screen>\n            <Inner>\n                <ChooseText>Choose your player</ChooseText>\n                <ButtonRow>\n                    <button onClick={() => choosePlayer(PLAYER_X)}>X</button>\n                    <p>or</p>\n                    <button onClick={() => choosePlayer(PLAYER_O)}>O</button>\n                </ButtonRow>\n            </Inner>\n        </Screen>\n    ) : (\n            <Container dims={DIMS}>\n                {\n                    grid.map((value, index) => {\n                        const isActive = value !== null;\n                        return (\n                            <Square\n                                isActive={isActive}\n                                value={value === PLAYER_X ? \"X\" : \"O\"}\n                                key={index}\n                                onClick={() => humanMove(index)}\n                            />\n                        );\n                    })\n                }\n                <Strikethrough\n                    styles={\n                        gameState === GAME_STATES.over && board.getStrikethroughStyles()\n                    }\n                />\n                <CustomModal\n                    isOpen={modalOpen}\n                    winner={winner}\n                    close={() => setModalOpen(false)}\n                    startNewGame={startNewGame}\n                />\n            </Container>\n        );\n}\n\nconst ButtonRow = styled.div`\n  display: flex;\n  width: 150px;\n  justify-content: space-between;\n`;\n\nconst Screen = styled.div``;\n\nconst Inner = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 30px;\n`;\n\nconst ChooseText = styled.p``;\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: ${({ dims }) => `${dims * (SQUARE_DIMS + 5)}px`};\n  flex-flow: wrap;\n  position: relative;\n`;\n\nconst Strikethrough = styled.div`\n  position: absolute;\n  ${({ styles }) => styles}\n  background-color: indianred;\n  height: 5px;\n  width: ${({ styles }) => !styles && \"0px\"};\n`;\n\nexport default Tictactoe;\n","import { DIMS, DRAW } from \"utils\";\n\nexport default class Board {\n    constructor(grid) {\n        this.grid = grid || new Array(DIMS ** 2).fill(null);\n        this.winningIndex = null; // track the index of winning combination\n    }\n\n    // Collect indices of empty squares and return them\n    getEmptySquares = (grid = this.grid) => {\n        let squares = [];\n        grid.forEach((square, i) => {\n            if (square === null) squares.push(i);\n        });\n        return squares;\n    };\n\n    isEmpty = (grid = this.grid) => {\n        return this.getEmptySquares(grid).length === DIMS ** 2;\n    };\n\n    getWinner = (grid = this.grid) => {\n        const winningCombos = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6]\n        ];\n        let res = null;\n        winningCombos.forEach((el, i) => {\n            if (\n                grid[el[0]] !== null &&\n                grid[el[0]] === grid[el[1]] &&\n                grid[el[0]] === grid[el[2]]\n            ) {\n                res = grid[el[0]];\n                this.winningIndex = i;\n            } else if (res === null && this.getEmptySquares(grid).length === 0) {\n                res = DRAW;\n                this.winningIndex = null;\n            }\n        });\n        return res;\n    };\n\n    /**\n  * Get the styles for strike through based on the combination that won\n  */\n    getStrikethroughStyles = () => {\n        const defaultWidth = 285;\n        const diagonalWidth = 400;\n        switch (this.winningIndex) {\n            case 0:\n                return `\n          transform: none;\n          top: 41px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n            case 1:\n                return `\n          transform: none;\n          top: 140px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n            case 2:\n                return `\n          transform: none;\n          top: 242px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n            case 3:\n                return `\n          transform: rotate(90deg);\n          top: 145px;\n          left: -86px;\n          width: ${defaultWidth}px;\n        `;\n            case 4:\n                return `\n          transform: rotate(90deg);\n          top: 145px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n            case 5:\n                return `\n          transform: rotate(90deg);\n          top: 145px;\n          left: 115px;\n          width: ${defaultWidth}px;\n        `;\n            case 6:\n                return `\n          transform: rotate(45deg);\n          top: 145px;\n          left: -44px;\n          width: ${diagonalWidth}px;\n        `;\n            case 7:\n                return `\n          transform: rotate(-45deg);\n          top: 145px;\n          left: -46px;\n          width: ${diagonalWidth}px;\n        `;\n            default:\n                return null;\n        }\n    };\n\n    clone = () => {\n        return new Board(this.grid.concat());\n    };\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Tictactoe from \"./tictactoe\";\n\nfunction App() {\n  return (\n    <MainContainer>\n      <Tictactoe />\n    </MainContainer>\n  );\n}\n\nconst MainContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}