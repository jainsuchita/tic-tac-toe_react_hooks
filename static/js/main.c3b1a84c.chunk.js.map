{"version":3,"sources":["utils/constants.js","utils/helper.js","components/Square.js","tictactoe.js","components/Board.js","App.js","index.js"],"names":["GAME_STATES","getRandomInt","min","max","Math","ceil","floor","random","Button","styled","button","Square","props","value","rest","onClick","isActive","arr","Array","fill","board","grid","getEmptySquares","squares","forEach","square","i","push","isEmpty","length","getWinner","winningCombos","res","el","clone","Board","concat","this","ButtonRow","div","Screen","Inner","ChooseText","p","Container","dims","Tictactoe","useState","setGrid","gameState","setGameState","human","computer","players","setPlayers","nextMove","setNextMove","winner","setWinner","move","useCallback","index","player","gridCopy","computerMove","choosePlayer","option","useEffect","timeout","setTimeout","clearTimeout","winnerStr","declareWinner","map","key","humanMove","MainContainer","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c3b1a84c.chunk.js","sourcesContent":["// Dimensions of the board (3x3 squares), game outcomes and players, \n// and dimensions for the board squares, in pixels.\n\nexport const DIMS = 3;\nexport const DRAW = 0;\nexport const PLAYER_X = 1;\nexport const PLAYER_O = 2;\nexport const SQUARE_DIMS = 100;\n\nexport const GAME_STATES = {\n    notStarted: \"not_started\",\n    inProgress: \"in_progress\",\n    over: \"over\"\n};\n","import { PLAYER_O, PLAYER_X } from \"./constants\";\n\n// Get random integer in a range min-max\nexport const getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n\nexport const switchPlayer = player => {\n    return player === PLAYER_X ? PLAYER_O : PLAYER_X;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { SQUARE_DIMS } from \"utils\";\n\nconst Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${SQUARE_DIMS}px;\n  height: ${SQUARE_DIMS}px;\n  font-size: 30px;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst Square = props => {\n    const { value, ...rest } = props;\n\n    return (\n        <Button\n            onClick={() => rest.onClick()}>\n            {rest.isActive && value}\n        </Button>\n    );\n}\n\nexport default Square;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport {\n    GAME_STATES, PLAYER_X, PLAYER_O, switchPlayer,\n    SQUARE_DIMS, DIMS, DRAW,\n    getRandomInt,\n} from \"utils\";\nimport { Square, Board } from \"components\";\n\nconst arr = new Array(DIMS ** 2).fill(null);\nconst board = new Board();\n\nconst Tictactoe = () => {\n    const [grid, setGrid] = useState(arr);\n\n    const [gameState, setGameState] = useState(GAME_STATES.notStarted);\n\n    const [players, setPlayers] = useState({\n        human: PLAYER_X,\n        computer: PLAYER_O\n    });\n\n    const [nextMove, setNextMove] = useState(null);\n\n    const [winner, setWinner] = useState(null);\n\n    const move = useCallback(\n        (index, player) => {\n            if (player && gameState === GAME_STATES.inProgress) {\n                setGrid(grid => {\n                    const gridCopy = grid.concat();\n                    gridCopy[index] = player;\n                    return gridCopy;\n                });\n            }\n        },\n        [gameState]\n    );\n\n    const computerMove = useCallback(() => {\n        let index = getRandomInt(0, 8);\n        while (grid[index]) {\n            index = getRandomInt(0, 8);\n        }\n\n        move(index, players.computer);\n        setNextMove(players.human);\n\n    }, [move, grid, players]);\n\n    const humanMove = index => {\n        if (!grid[index]) {\n            move(index, players.human);\n            setNextMove(players.computer);\n        }\n    };\n\n    const choosePlayer = option => {\n        setPlayers({ human: option, computer: switchPlayer(option) });\n        setGameState(GAME_STATES.inProgress);\n        setNextMove(PLAYER_X); // Set the Player X to make the first move\n    };\n\n    const startNewGame = () => {\n        setGameState(GAME_STATES.notStarted);\n        setGrid(arr);\n    };\n\n    useEffect(() => {\n        let timeout;\n        if (\n            nextMove !== null &&\n            nextMove === players.computer &&\n            gameState !== GAME_STATES.over\n        ) {\n            // Delay computer moves to make them more natural\n            timeout = setTimeout(() => {\n                computerMove();\n            }, 500);\n        }\n\n        // ComponentUnmount lifecycle hook\n        return () => timeout && clearTimeout(timeout);\n\n    }, [nextMove, computerMove, players.computer, gameState]);\n\n    //It makes sense to check if the game has reached the end after each move is made, so we'll introduce another useEffect hook to track these changes.\n    useEffect(() => {\n        const winner = board.getWinner(grid);\n\n        const declareWinner = winner => {\n            let winnerStr;\n            switch (winner) {\n                case PLAYER_X:\n                    winnerStr = \"Player X wins!\";\n                    break;\n                case PLAYER_O:\n                    winnerStr = \"Player O wins!\";\n                    break;\n                case DRAW:\n                default:\n                    winnerStr = \"It's a draw\";\n            }\n            setGameState(GAME_STATES.over);\n            setWinner(winnerStr);\n        };\n\n        if (winner !== null && gameState !== GAME_STATES.over) {\n            declareWinner(winner);\n        }\n    }, [gameState, grid, nextMove]);\n\n    switch (gameState) {\n        case GAME_STATES.notStarted:\n        default:\n            return (\n                <Screen>\n                    <Inner>\n                        <ChooseText>Choose your player</ChooseText>\n                        <ButtonRow>\n                            <button onClick={() => choosePlayer(PLAYER_X)}>X</button>\n                            <p>or</p>\n                            <button onClick={() => choosePlayer(PLAYER_O)}>O</button>\n                        </ButtonRow>\n                    </Inner>\n                </Screen>\n            );\n        case GAME_STATES.inProgress:\n            return (\n                <Container dims={DIMS}>\n                    {\n                        grid.map((value, index) => {\n                            const isActive = value !== null;\n                            return (\n                                <Square\n                                    isActive={isActive}\n                                    value={value === PLAYER_X ? \"X\" : \"O\"}\n                                    key={index}\n                                    onClick={() => humanMove(index)}\n                                />\n                            );\n                        })\n                    }\n                </Container>\n            );\n        case GAME_STATES.over:\n            return (\n                <div>\n                    <p>{winner}</p>\n                    <button onClick={startNewGame}>Start over</button>\n                </div>\n            );\n    }\n}\n\nconst ButtonRow = styled.div`\n  display: flex;\n  width: 150px;\n  justify-content: space-between;\n`;\n\nconst Screen = styled.div``;\n\nconst Inner = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 30px;\n`;\n\nconst ChooseText = styled.p``;\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: ${({ dims }) => `${dims * (SQUARE_DIMS + 5)}px`};\n  flex-flow: wrap;\n  position: relative;\n`;\n\nexport default Tictactoe;\n","import { DIMS, DRAW } from \"utils\";\n\nexport default class Board {\n    constructor(grid) {\n        this.grid = grid || new Array(DIMS ** 2).fill(null);\n    }\n\n    // Collect indices of empty squares and return them\n    getEmptySquares = (grid = this.grid) => {\n        let squares = [];\n        grid.forEach((square, i) => {\n            if (square === null) squares.push(i);\n        });\n        return squares;\n    };\n\n    isEmpty = (grid = this.grid) => {\n        return this.getEmptySquares(grid).length === DIMS ** 2;\n    };\n\n    getWinner = (grid = this.grid) => {\n        const winningCombos = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6]\n        ];\n        let res = null;\n        winningCombos.forEach((el, i) => {\n            if (\n                grid[el[0]] !== null &&\n                grid[el[0]] === grid[el[1]] &&\n                grid[el[0]] === grid[el[2]]\n            ) {\n                res = grid[el[0]];\n            } else if (res === null && this.getEmptySquares(grid).length === 0) {\n                res = DRAW;\n            }\n        });\n        return res;\n    };\n\n    clone = () => {\n        return new Board(this.grid.concat());\n    };\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Tictactoe from \"./tictactoe\";\n\nfunction App() {\n  return (\n    <MainContainer>\n      <Tictactoe />\n    </MainContainer>\n  );\n}\n\nconst MainContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}